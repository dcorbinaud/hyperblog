- git rm -
    ->  Este comando nos ayuda a eliminar archivos de Git sin eliminar su historial del sistema de versiones. Esto quiere decir que si necesitamos recuperar el archivo solo debemos “viajar en el tiempo” y recuperar el último commit antes de borrar el archivo en cuestión.

        Recuerda que git rm no puede usarse así nomás. Debemos usar uno de los flags para indicarle a Git cómo eliminar los archivos que ya no necesitamos en la última versión del proyecto:
            -> git rm --cached: Elimina los archivos del área de Staging y del próximo commit pero los mantiene en nuestro disco duro.
            -> git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).

- Configurar git -
    -> Para revisar la configuración de git se utiliza el comando "git config --list"
    -> Para modificar la configuración se tiliza "git config --global parametro_a_modificar 'valor'"
        Ejemplo
            -> git config --global user.name "Diego Corbinnaud"
            -> git config --global user.email "diego.corbinaud@gmail.com"


- git show -
    -> Este comando te muestra un historial de cambios realizados a un documento en espesifico o todo.
        -> git show historia.txt


- git log -
    ->  Nos muestra todos los commits realizados.
        Ademas si se utiliza en conjunto con "--stat" se puede visualizar exactamente cuantos cambios se hicieron en cada archivo.
            -> git log
                
                commit b81edceed2149b74e13f6dbe5773c6bb27cc4d0d (HEAD -> master)
                Author: Diego Corbinaud <dcorbina@everis.com>
                Date:   Sat Jan 2 22:58:58 2021 -0300

                    arranco mi proyecto con html y css

            -> git log -- stat

                commit b81edceed2149b74e13f6dbe5773c6bb27cc4d0d (HEAD -> master)
                Author: Diego Corbinaud <dcorbina@everis.com>
                Date:   Sat Jan 2 22:58:58 2021 -0300

                    arranco mi proyecto con html y css

                blogpost.html   | 13 +++++++++++++
                css/estilos.css |  6 ++++++
                historia.txt    |  4 ++--
                3 files changed, 21 insertions(+), 2 deletions(-)

- git reset -
    -> Se utiliza para volver a una version anterior, se utiliza en conjunto con "git log" para conocer el tag del commit al que queremos volver, por ejemplo al realizar este comando nos aparecera lo siguiente
                commit 7cad5a2b0f788bbfec42fe1647aa303a0776c953 (HEAD -> master)
                Author: Diego Corbinaud <dcorbina@everis.com>
                Date:   Sat Jan 2 22:23:28 2021 -0300

                    Este es el tercer y ultimo commit

                commit fbfd5017143ba2b04d352ab1ead9b2305c811887
                Author: Diego Corbinaud <dcorbina@everis.com>
                Date:   Sat Jan 2 22:12:58 2021 -0300

                    Este es el segundo commit

                commit 014f0fa175a54359ed45100900c9b71ff48a5935
                Author: Diego Corbinaud <dcorbina@everis.com>
                Date:   Sat Jan 2 22:06:13 2021 -0300

                    Este es el primer commit

        Con esto podemos conocer el tag del commit, que es el texto con numeros y letras aleatorios "fbfd5017143ba2b04d352ab1ead9b2305c811887" (segundo commit).
        
        Entonces, supongamos que queremos volver al segundo commit, para esto se utiliza "git reset" seguido de otro parametro:
            -> hard
                -> Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.
            -> soft
                -> Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit.
            -> HEAD
                -> Este es el comando para sacar archivos del área de Staging. No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con "git add", por supuesto.

        Su nomesclatura es la siguiente:
            -> git reset codigo_del_commit --hard/--soft

        